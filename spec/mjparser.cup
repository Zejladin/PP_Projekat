package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import rs.ac.bg.etf.pp1.ast.*;
import java.util.logging.Logger;

parser code {:

	public boolean errorWhileParsing = false;

	public Symbol errSymbol;

    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, cur_token);
    }

    public void syntax_error(Symbol cur_token) {
        errorWhileParsing = true;
        errSymbol = cur_token;
        //report_error("\nSyntax error", cur_token);
    }

    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatal error, parsing cannot continue", cur_token);
    }

    public void report_error(String message, Object info) {
    	StringBuilder msg = new StringBuilder(message);
    	if (info instanceof Symbol){
            msg.append (" on line ").append(((Symbol)info).left);
            msg.append (" on line ").append(((Symbol)info).value);
        } 
        System.err.println(msg.toString());
        errorWhileParsing = true;
    }

    public void report_error_on_curr_token(String message){
        report_error(message, cur_token);
    }

    public void report_error_on_err_token(String message){
        report_error(message, errSymbol);
    }

:}

scan with {:
	Symbol s = this.getScanner().next_token();
	/* if (s != null && s.value != null)
		log.info(s.toString() + " " + s.value.toString()); */
	return s;
:}

terminal OP_LPAREN, OP_RPAREN, PROG, CONST, OP_SEMI, OP_COMMA, OP_ASSIGN, BREAK, CLASS, ELSE, IF, NEW, ABSTRACT;
terminal PRINT, READ, RETURN, VOID, FOR, EXTENDS, CONTINUE, OP_PLUS, OP_MINUS, OP_MUL, OP_DIV, OP_MOD, OP_EQUAL, OP_NOT_EQUAL;
terminal OP_GREATER, OP_GREATER_EQUAL, OP_LESS, OP_LESS_EQUAL, OP_AND, OP_OR, OP_INC, OP_DEC, OP_DOT, OP_LSQUARE;
terminal OP_RSQUARE, OP_LBRACE, OP_RBRACE;
terminal String IDENT;
terminal Integer NUM_CONST;
terminal BOOL_CONST;
terminal Character CHAR_CONST;

nonterminal ProgramHeaderDeclList, MethodDeclList, MethodDecl, ConstDeclList, ConstDeclMore, ConstDeclCore;
nonterminal VarDeclList, VarDeclMore, VarDeclChoice;
nonterminal FormalParams, FormalParam;
nonterminal Statement, StatementList, CondStatement;
nonterminal Assignop, Relop, Addop, Mulop;
nonterminal ActualParams, ActualParamsChoice;
nonterminal DesignatorStatement, ForStepPart;
nonterminal LocalVarDeclList, ClassDecl, ClassExtendsChoice;
nonterminal AbstractClassDecl, AbstractMethDeclChoice, AbstractClassMethodList, AbstractMethodDecl;
nonterminal FormalParamsChoice, MethodType;
nonterminal ForStartMarker, ForStatementMarker;
nonterminal ArrayLoadMarker;
nonterminal MethDeclChoice, ClassDeclHeader;

nonterminal rs.etf.pp1.symboltable.concepts.Obj ProgramName;
nonterminal rs.etf.pp1.symboltable.concepts.Obj Program;
nonterminal rs.etf.pp1.symboltable.concepts.Struct Type;
nonterminal rs.etf.pp1.symboltable.concepts.Obj MethodName;
nonterminal rs.etf.pp1.symboltable.concepts.Struct Expr;
nonterminal rs.etf.pp1.symboltable.concepts.Obj DesignatorBase;
nonterminal rs.etf.pp1.symboltable.concepts.Obj Designator;
nonterminal rs.etf.pp1.symboltable.concepts.Struct Factor;
nonterminal rs.etf.pp1.symboltable.concepts.Struct Term;
nonterminal IfStartMarker;
nonterminal VarDeclCore;
nonterminal Condition;
nonterminal CondFact;
nonterminal CondTerm;
nonterminal IfElseMarker;
nonterminal ForCondPart;
nonterminal ForInitPart;


precedence left ELSE;

Program ::= (Program) PROG ProgramName:progName ProgramHeaderDeclList OP_LBRACE MethodDeclList OP_RBRACE;

ProgramName ::= (ProgramName) IDENT:progName;

Type ::= (Type) IDENT:typeName;

ProgramHeaderDeclList ::= (ProgramHeaderConstDecl) ProgramHeaderDeclList ConstDeclList
    |
    (ProgramHeaderVarDecl) ProgramHeaderDeclList VarDeclList
	|
	(ProgramHeaderAbstractClassDecl) ProgramHeaderDeclList AbstractClassDecl
    |
    (ProgramHeaderClassDecl) ProgramHeaderDeclList ClassDecl
    |
    (NoProgramHeaderDecl) /* empty */
    ;

ConstDeclList ::= (ConstDeclBase) CONST Type ConstDeclCore ConstDeclMore OP_SEMI;

ConstDeclMore ::= (ConstDeclMultiple) ConstDeclMore OP_COMMA ConstDeclCore
    |
    (NoConstDecl) /* empty */
    ;

ConstDeclCore ::= (ConstDeclNum) IDENT:constIdentifier OP_ASSIGN NUM_CONST:constVal
    |
    (ConstDeclChar) IDENT:constIdentifier OP_ASSIGN CHAR_CONST:constVal
    |
    (ConstDeclBool) IDENT:constIdentifier OP_ASSIGN BOOL_CONST:constVal
    ;

VarDeclList ::= (VarDeclBase) Type VarDeclCore VarDeclMore OP_SEMI
    |
    (VarDeclError) error OP_SEMI:line {: parser.report_error_on_curr_token("Variable declaration1 error"); :}
    ;

VarDeclMore ::= (VarDeclMultiple) VarDeclMore OP_COMMA VarDeclCore
    |
    (NoVarDecl) /* empty */
    ;

VarDeclCore ::= (VarDecl) IDENT:varName
    |
    (VarDeclArray) IDENT:varName OP_LSQUARE OP_RSQUARE
    |
    (VarDeclCoreError) error {: parser.report_error_on_curr_token("Variable declaration1 error"); :}
    ;

LocalVarDeclList ::= (MethodVarDeclSingle) VarDeclList
    |
    (MethodVarDeclMultiple) LocalVarDeclList VarDeclList
    ;

VarDeclChoice ::= (VarDeclYes) LocalVarDeclList
    |
    (VarDeclNo) /* empty */
    ;

FormalParamsChoice ::= (HasFormalParams) FormalParams
    |
    (NoFormalParams) /* empty */
    ;

FormalParams ::= (FormalParamsFirst) FormalParam
    |
    (FormalParamsNext) FormalParams OP_COMMA FormalParam
    ;

FormalParam ::= (FormalParamSingle) Type IDENT:paramName
    |
    (FormalParamArray) Type IDENT:paramName OP_LSQUARE OP_RSQUARE
    |
    (FormalParamError) error {: parser.report_error_on_err_token("Error in formal param declaration"); :}
    ;

MethodDeclList ::= (MethodList) MethodDeclList MethodDecl
    |
    (NoMethodList) /* empty */
    ;

MethodDecl ::= (MethodDecl) MethodType MethodName OP_LPAREN FormalParamsChoice OP_RPAREN VarDeclChoice OP_LBRACE StatementList OP_RBRACE;

MethodName ::= (MethodName) IDENT:methodName;

MethodType ::= (MethodTypeActual) Type
    |
    (MethodTypeVoid) VOID
    ;

MethDeclChoice ::= (ClassMethodDecl) OP_LBRACE MethodDeclList OP_RBRACE
    |
    (ClassNoMethodDecl) /* empty */
    ;

ClassDeclHeader ::= (ClassDeclHeader) IDENT:className;

ClassDecl ::= (ClassDecl) CLASS ClassDeclHeader ClassExtendsChoice OP_LBRACE VarDeclChoice MethDeclChoice OP_RBRACE;

ClassExtendsChoice ::= (ClassExtends) EXTENDS Type
    |
    (NoClassExtends) /* empty */
    |
    (ClassExtendsError) error {: parser.report_error_on_err_token("Error in extends clause"); :}
    ;

AbstractClassDecl ::= (AbstractClassDecl) ABSTRACT CLASS ClassDeclHeader ClassExtendsChoice OP_LBRACE VarDeclChoice AbstractMethDeclChoice OP_RBRACE;

AbstractMethDeclChoice ::= (AbstractYesMethodDecl) OP_LBRACE AbstractClassMethodList OP_RBRACE
						|
						(AbstractNoMethodDecl) /* empty */
						;
						
AbstractClassMethodList ::= (AbstractClassMethodDecl) AbstractClassMethodList MethodDecl
						|
						(AbstractClassAbstractMethodDecl) AbstractClassMethodList AbstractMethodDecl
						|
						(NoAbstractClassMethod) /* empty */
						;
						
AbstractMethodDecl	::= (AbstractMethodDecl) ABSTRACT MethodType MethodName OP_LPAREN FormalParamsChoice OP_RPAREN OP_SEMI;					

ActualParamsChoice ::= (HasActualParams) ActualParams
    |
    (NoActualParams) /* */
    ;

ActualParams ::= (ActualParamsSingle) Expr
    |
    (ActualParamsMultiple) ActualParams OP_COMMA Expr
    ;

Expr ::= (ExprTerm) Term
    |
    (ExprNegatedTerm) OP_MINUS Term
    |
    (ExprList) Expr Addop Term
    ;

Assignop ::= OP_ASSIGN;

Term ::= (TermBase) Factor
    |
    (TermList) Term Mulop Factor
    ;

DesignatorBase ::= (DesignatorBase) Designator;

ArrayLoadMarker ::= (ArrayLoadMarker) /* empty */;

Designator ::= (DesignatorIdent) IDENT:designatorName
    |
    (DesignatorDot) Designator OP_DOT IDENT:designatorName
    |
    (DesignatorArray) Designator ArrayLoadMarker OP_LSQUARE Expr OP_RSQUARE
    ;

Factor ::= (FactorNum) NUM_CONST:numberFactor
    |
    (FactorChar) CHAR_CONST:charFactor
    |
    (FactorBool) BOOL_CONST:boolFactor
    |
    (FactorAllocation) NEW Type
    |
    (FactorAllocationArray) NEW Type OP_LSQUARE Expr OP_RSQUARE
    |
    (FactorGrouped) OP_LPAREN Expr OP_RPAREN
    |
    (FactorDesignator) DesignatorBase
    |
    (FactorDesignatorCall) DesignatorBase OP_LPAREN ActualParamsChoice OP_RPAREN
    ;

Relop ::= (RelopEquals) OP_EQUAL
    |
    (RelopNotEquals) OP_NOT_EQUAL
    |
    (RelopGreaterThan) OP_GREATER
    |
    (RelopGreaterEqual) OP_GREATER_EQUAL
    |
    (RelopLessThan) OP_LESS
    |
    (RelopLessEqual) OP_LESS_EQUAL
    ;

Addop ::= (AddopAdd) OP_PLUS
    |
    (AddopSub) OP_MINUS
    ;

Mulop ::= (MulopMul) OP_MUL
    |
    (MulopDiv) OP_DIV
    |
    (MulopMod) OP_MOD
    ;

Condition ::= (ConditionBase) CondTerm
    |
    (ConditionList) Condition OP_OR CondTerm
    ;

CondTerm ::= (CondTermBase) CondFact
    |
    (CondTermList) CondTerm OP_AND CondFact
    ;

CondFact ::= (CondFactBase) Expr
    |
    (CondFactRel) Expr Relop Expr
    ;

StatementList ::= (SingleStatement) StatementList Statement
    |
    (NoStatement) /* empty */
    ;

Statement ::= (BreakStatement) BREAK OP_SEMI
    |
    (ContinueStatement) CONTINUE OP_SEMI
    |
    (MultipleStatements) OP_LBRACE StatementList OP_RBRACE
    |
    (ReturnStatementVoid) RETURN OP_SEMI
    |
    (ReturnStatement) RETURN Expr OP_SEMI
    |
    (PrintStatementOneArg) PRINT OP_LPAREN Expr OP_RPAREN OP_SEMI
    |
    (PrintStatementTwoArg) PRINT OP_LPAREN Expr OP_COMMA NUM_CONST:num OP_RPAREN OP_SEMI
    |
    (ConditionalStatement) CondStatement
    |
    (ReadStatement) READ OP_LPAREN DesignatorBase OP_RPAREN OP_SEMI
    |
    (DesignatorStatementBase) DesignatorStatement OP_SEMI
    |
    (ForStatement) FOR OP_LPAREN ForStartMarker ForInitPart OP_SEMI ForCondPart OP_SEMI ForStepPart OP_RPAREN ForStatementMarker Statement
    ;

DesignatorStatement ::= (DesignatorAssign) DesignatorBase Assignop Expr
    |
    (DesignatorCall) DesignatorBase OP_LPAREN ActualParamsChoice OP_RPAREN
    |
    (DesignatorInc) DesignatorBase OP_INC
    |
    (DesignatorDec) DesignatorBase OP_DEC
    |
    (DesignatorError) error {: parser.report_error_on_err_token("Error in designator statement"); :}
    ;

IfStartMarker ::= (IfStartMarkerCond) Condition
    |
    (IfCondError) error {: parser.report_error_on_err_token("Error in if condition"); :}
;

IfElseMarker ::= (IfElseMarker) /* empty */;

CondStatement ::= (IfStatement) IF OP_LPAREN IfStartMarker OP_RPAREN Statement
    |
    (IfElseStatement) IF OP_LPAREN IfStartMarker OP_RPAREN Statement ELSE IfElseMarker Statement
    ;

ForInitPart ::= (ForInit) DesignatorStatement
    |
    (NoForInit) /* empty */
    ;

ForCondPart ::= (ForCond) Condition
    |
    (NoForCond) /* empty */
    ;

ForStepPart ::= (ForStep) DesignatorStatement
    |
    (NoForStep) /* empty */
    ;

ForStatementMarker ::= (ForStatementMarker) /* empty */;

ForStartMarker ::= (ForStartMarker) /* empty */;